name: test-build

# on: [push, pull_request]
on:
  workflow_dispatch: {}
  push:
    branches-ignore:
      - doc
      - alpha

jobs:
  test-build:
    name: build and release electron app
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out git repository
        uses: actions/checkout@v3.0.0

      - name: Install Node.js
        uses: actions/setup-node@v3.0.0
        with:
          node-version: "20"
          cache: "npm"
      # 专门缓存 Electron 二进制文件
      - name: Cache Electron
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/electron
            ~/.cache/electron-builder
          key: ${{ runner.os }}-electron-${{ hashFiles('electron/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-electron-

      - name: Install -g
        run: npm install -g cross-env zx

      - name: Install python-setuptools
        if: matrix.os == 'macos-latest'
        run: brew install python-setuptools

        # 根目录的依赖缓存
      - name: Cache root dependencies
        uses: actions/cache@v3
        id: cache-root
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 安装根目录依赖（如果缓存未命中）
      - name: Install root dependencies
        if: steps.cache-root.outputs.cache-hit != 'true'
        run: npm install

      # web 目录的依赖缓存
      - name: Cache web dependencies
        uses: actions/cache@v3
        id: cache-web
        with:
          path: web/node_modules
          key: ${{ runner.os }}-node-web-${{ hashFiles('web/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-web-

      # 安装 web 目录依赖（如果缓存未命中）
      - name: Install web dependencies
        if: steps.cache-web.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ./web

      # electron 目录的依赖缓存
      - name: Cache electron dependencies
        uses: actions/cache@v3
        id: cache-electron
        with:
          path: electron/node_modules
          key: ${{ runner.os }}-node-electron-${{ hashFiles('electron/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-electron-

      # 安装 electron 目录依赖（如果缓存未命中）
      - name: Install electron dependencies
        if: steps.cache-electron.outputs.cache-hit != 'true'
        run: npm install
        working-directory: ./electron

      - name: Build Electron App (macOS only)
        if: matrix.os == 'macos-latest'
        run: npm run prod
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          # GH_TOKEN: ${{ secrets.GH_TOKEN }}
          USE_HARD_LINKS: false
          MYRUNENV: github

      - name: Build Electron App (widnows+linux)
        if: matrix.os != 'macos-latest'
        run: npm run prod
        env:
          # GH_TOKEN: ${{ secrets.GH_TOKEN }}
          MYRUNENV: github

      - name: upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}
          path: electron/dist

      - name: Test executable
        if: runner.os == 'Windows'
        run: |
          dir dist
          # 尝试启动应用检查错误信息
          Start-Process -FilePath ".\electron\dist\win-unpacked\HyperChat.exe" -NoNewWindow
          # 等待几秒然后检查是否运行
          Start-Sleep -s 5
          Get-Process -Name "HyperChat" -ErrorAction SilentlyContinue
      # - name: Publish Release
      #   uses: softprops/action-gh-release@v2
      #   if: startsWith(github.ref, 'refs/tags/')
      #   with:
      #     files: |
      #       dist/*
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
